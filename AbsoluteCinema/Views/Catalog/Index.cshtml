@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model IEnumerable<ABSOLUTE_CINEMA.AbsoluteCinema.ViewModels.MovieViewModel>
@using ABSOLUTE_CINEMA.AbsoluteCinema.ViewModels

@{
    ViewBag.Title = "Каталог фильмов";
    var selectedGenres = ViewBag.SelectedGenres as List<string> ?? new List<string>();
}

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Netflix+Sans:wght@300,400,700&display=swap');

    :root {
        --netflix-red: #e50914;
        --netflix-dark: #141414;
        --netflix-gray: #333;
        --netflix-light: #f5f5f1;
        --netflix-gradient: linear-gradient(to top, rgba(20, 20, 20, 0.9) 0%, rgba(20, 20, 20, 0.6) 50%, rgba(20, 20, 20, 0.3) 100%);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        background-color: var(--netflix-dark);
        color: var(--netflix-light);
        font-family: 'Netflix Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
        overflow-x: hidden;
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
        animation: fadeIn 0.8s ease-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        letter-spacing: 0.5px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        position: relative;
        display: inline-block;
    }

        h1::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 60px;
            height: 4px;
            background: var(--netflix-red);
            border-radius: 2px;
            animation: underlineGrow 0.6s 0.3s cubic-bezier(0.19, 1, 0.22, 1) forwards;
            transform-origin: left;
            transform: scaleX(0);
        }

    @@keyframes underlineGrow {
        to {
            transform: scaleX(1);
        }
    }

    /* Genre Filter Styles */
    .genre-filter {
        background-color: rgba(51, 51, 51, 0.7);
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 3rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.1);
        box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        transition: all 0.4s ease;
    }

        .genre-filter:hover {
            box-shadow: 0 10px 25px rgba(0,0,0,0.4);
            transform: translateY(-2px);
        }

        .genre-filter label {
            display: block;
            margin-bottom: 1rem;
            font-weight: 500;
            font-size: 1.1rem;
            letter-spacing: 0.5px;
        }

    .genre-checkboxes {
        display: flex;
        flex-wrap: wrap;
        gap: 1.2rem;
        margin-bottom: 1.5rem;
    }

    .genre-checkbox {
        position: relative;
    }

        .genre-checkbox input[type="checkbox"] {
            position: absolute;
            opacity: 0;
        }

        .genre-checkbox label {
            display: inline-block;
            padding: 0.5rem 1.2rem;
            background-color: rgba(255,255,255,0.1);
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 400;
            font-size: 0.95rem;
            user-select: none;
        }

        .genre-checkbox input[type="checkbox"]:checked + label {
            background-color: var(--netflix-red);
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(229, 9, 20, 0.3);
        }

        .genre-checkbox input[type="checkbox"]:focus + label {
            outline: 2px solid rgba(255,255,255,0.5);
        }

    .filter-button {
        background-color: var(--netflix-red);
        color: white;
        border: none;
        padding: 0.8rem 2rem;
        border-radius: 4px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        font-size: 1rem;
        letter-spacing: 0.5px;
        position: relative;
        overflow: hidden;
    }

        .filter-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: 0.5s;
        }

        .filter-button:hover {
            background-color: #f40612;
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(229, 9, 20, 0.4);
        }

            .filter-button:hover::before {
                left: 100%;
            }

    /* Movie Row Styles */
    .movie-row {
        margin-bottom: 3rem;
        position: relative;
    }

    .row-title {
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
        font-weight: 600;
        letter-spacing: 0.5px;
        display: flex;
        align-items: center;
    }

        .row-title::before {
            content: '';
            display: inline-block;
            width: 4px;
            height: 20px;
            background: var(--netflix-red);
            margin-right: 12px;
            border-radius: 2px;
        }

    .movie-scroller {
        display: flex;
        overflow-x: auto;
        scroll-behavior: smooth;
        padding: 1rem 0;
        gap: 1.5rem;
        -webkit-overflow-scrolling: touch;
        scroll-snap-type: x proximity;
        padding-bottom: 1rem;
    }

        .movie-scroller::-webkit-scrollbar {
            height: 8px;
            background-color: rgba(20,20,20,0.2);
            border-radius: 4px;
        }

        .movie-scroller::-webkit-scrollbar-thumb {
            background-color: var(--netflix-red);
            border-radius: 4px;
        }

    .movie-card {
        flex: 0 0 auto;
        width: 220px;
        transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        scroll-snap-align: start;
        position: relative;
        border-radius: 6px;
        overflow: hidden;
    }

        .movie-card:hover {
            transform: scale(1.05) translateY(-10px);
            z-index: 10;
        }

    .movie-poster-container {
        position: relative;
        width: 100%;
        height: 0;
        padding-bottom: 150%;
        overflow: hidden;
        border-radius: 6px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.3);
    }

    .movie-poster {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease;
    }

    .movie-card:hover .movie-poster {
        transform: scale(1.08);
    }

    .movie-info-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 1.5rem 1rem 1rem;
        background: var(--netflix-gradient);
        transform: translateY(100%);
        transition: transform 0.3s ease-out;
        opacity: 0;
    }

    .movie-card:hover .movie-info-overlay {
        transform: translateY(0);
        opacity: 1;
    }

    .movie-title {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-weight: 600;
    }

    .movie-year {
        color: rgba(255,255,255,0.7);
        font-size: 0.85rem;
        margin-bottom: 1rem;
    }

    .details-button {
        background-color: var(--netflix-red);
        color: white;
        border: none;
        padding: 0.6rem 1rem;
        border-radius: 4px;
        font-size: 0.9rem;
        cursor: pointer;
        width: 100%;
        text-align: center;
        transition: all 0.3s ease;
        font-weight: 500;
        letter-spacing: 0.5px;
        display: block;
        text-decoration: none;
    }

        .details-button:hover {
            background-color: #f40612;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(229, 9, 20, 0.4);
        }

    /* Floating notification */
    .notification {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        background-color: var(--netflix-red);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 4px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        transform: translateY(100px);
        opacity: 0;
        transition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
        z-index: 1000;
    }

        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .container {
            padding: 1.5rem;
        }

        h1 {
            font-size: 2rem;
        }

        .genre-checkboxes {
            gap: 0.8rem;
        }

        .genre-checkbox label {
            padding: 0.4rem 1rem;
            font-size: 0.85rem;
        }

        .movie-card {
            width: 160px;
        }

        .movie-title {
            font-size: 1rem;
        }
    }
</style>

<div class="container">
    <h1>@ViewBag.Title</h1>

    <form method="get" action="@Url.Action("Index", "Catalog")" class="genre-filter" id="filterForm">
        <label>Фильтрация по жанрам:</label>
        <div class="genre-checkboxes">
            @if (ViewBag.Genres != null)
            {
                foreach (var genre in ViewBag.Genres as IEnumerable<GenreViewModel>)
                {
                    <div class="genre-checkbox">
                        <input type="checkbox"
                               name="genres"
                               value="@genre.Name"
                               id="genre_@genre.Id"
                               @(selectedGenres.Contains(genre.Name) ? "checked" : "") />
                        <label for="genre_@genre.Id">@genre.Name</label>
                    </div>
                }
            }
        </div>
        <button type="submit" class="filter-button">Применить фильтры</button>
    </form>

    <div class="movie-row">
        <h2 class="row-title">Фильмы</h2>
        <div class="movie-scroller">
            @foreach (var movie in Model)
            {
                <div class="movie-card">
                    <div class="movie-poster-container">
                        @if (!string.IsNullOrEmpty(movie.YouTubeVideoId))
                        {
                            <img class="movie-poster"
                                 src="@($"https://img.youtube.com/vi/{movie.YouTubeVideoId}/0.jpg")"
                                 alt="@movie.Title" />
                        }
                        <div class="movie-info-overlay">
                            <h3 class="movie-title">@movie.Title</h3>
                            <p class="movie-year">@movie.Year</p>
                            <a href="@Url.Action("TrackAndDetails", "Catalog", new { id = movie.Id })"
                               class="details-button">Подробнее</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div class="notification" id="filterNotification">
    Фильтры успешно применены!
</div>

<script>
    // Анимация уведомления при применении фильтров
    document.getElementById('filterForm').addEventListener('submit', function() {
        setTimeout(function() {
            const notification = document.getElementById('filterNotification');
            notification.classList.add('show');

            setTimeout(function() {
                notification.classList.remove('show');
            }, 3000);
        }, 800);
    });

    
    const movieCards = document.querySelectorAll('.movie-card');

    movieCards.forEach(card => {
        card.addEventListener('mousemove', (e) => {
            const x = e.clientX - card.getBoundingClientRect().left;
            const y = e.clientY - card.getBoundingClientRect().top;

            const centerX = card.offsetWidth / 2;
            const centerY = card.offsetHeight / 2;

            const angleX = (y - centerY) / 20;
            const angleY = (centerX - x) / 20;

            card.style.transform = `rotateX(${angleX}deg) rota teY(${angleY}deg) scale(1.05)`;
        });

        card.addEventListener('mouseleave', () => {
            card.style.transform = 'scale(1.05) translateY(-10px)';
            setTimeout(() => {
                card.style.transform = '';
            }, 300);
        });
    });
</script>
